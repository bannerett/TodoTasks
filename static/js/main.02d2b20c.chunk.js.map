{"version":3,"sources":["context.js","Components/TodoItem.js","Components/TodoList.js","readucer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","id","title","completed","dispatch","useContext","cls","push","className","join","htmlFor","type","defaultChecked","onChange","payload","onClick","TodoList","props","console","log","todos","length","map","e","key","state","action","Date","now","filter","App","useReducer","reducer","JSON","parse","localStorage","getItem","useState","todoTitle","setTodoTitle","useEffect","setItem","stringify","addTodo","event","window","M","toast","html","Provider","value","target","onKeyPress","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0LAEaA,EAAUC,IAAMC,gBCCd,SAASC,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UAETC,EAAaC,qBAAWR,GAAxBO,SAC7BE,EAAM,CAAC,6BAMb,OAJIH,GACFG,EAAIC,KAAK,aAIT,wBAAIC,UAAWF,EAAIG,KAAK,MACtB,yBAAKD,UAAU,cACb,2BAAOE,QAAST,GACd,2BACEA,GAAIA,EACJU,KAAK,WACLC,eAAgBT,EAChBU,SAAU,WACRT,EAAS,CAAEO,KAAM,SAAUG,QAASb,OAGxC,0BAAMO,UAAU,aAAaN,KAGjC,yBAAKM,UAAU,UACb,uBACEA,UAAU,eACVO,QAAS,WACPX,EAAS,CACPO,KAAM,SACNG,QAASb,SC9BR,SAASe,EAASC,GAE/B,OADAC,QAAQC,IAAIF,GAEV,wBAAIT,UAAU,gBAAgBP,GAAG,aAC7BgB,EAAMG,MAAMC,OAEVJ,EAAMG,MAAME,KAAI,SAAAC,GAAC,OACf,kBAACvB,EAAD,CACEwB,IAAKD,EAAEtB,GACPA,GAAIsB,EAAEtB,GACNC,MAAOqB,EAAErB,MACTC,UAAWoB,EAAEpB,eANjB,Y,WCRK,WAAUsB,EAAOC,GAC9B,OAAQA,EAAOf,MACb,IAAK,MACH,MAAM,GAAN,mBACKc,GADL,CAEE,CACExB,GAAI0B,KAAKC,MACT1B,MAAOwB,EAAOZ,QACdX,WAAW,KAIjB,IAAK,SACH,OAAOsB,EAAMH,KAAI,SAAAC,GAIf,OAHIA,EAAEtB,KAAOyB,EAAOZ,UAClBS,EAAEpB,WAAaoB,EAAEpB,WAEZoB,KAGX,IAAK,SACH,OAAOE,EAAMI,QAAO,SAAAN,GAAC,OAAIA,EAAEtB,KAAOyB,EAAOZ,WAE3C,QACE,OAAOW,ICnBE,SAASK,IAAO,IAAD,EACFC,qBACxBC,EACAC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAHnB,mBACrBX,EADqB,KACdrB,EADc,OAKMiC,mBAAS,IALf,mBAKrBC,EALqB,KAKVC,EALU,KAsB5BC,qBAAU,WACRL,aAAaM,QAAQ,QAASR,KAAKS,UAAUjB,MAC5C,CAACA,IAWJ,IAAMkB,EAAU,SAAAC,GACK,UAAdA,EAAMpB,KAAkC,UAAfoB,EAAMjC,MAAmC,KAAd2B,IACvDlC,EAAS,CACPO,KAAM,MACNG,QAASwB,IAWXC,EAAa,IACbM,OAAOC,EAAEC,MAAM,CAAEC,KAAM,kBAEzB9B,QAAQC,IAAIM,IAsBd,OACE,kBAAC5B,EAAQoD,SAAT,CACEC,MAAO,CAEL9C,aAGF,yBAAKI,UAAU,gBACb,yBAAKA,UAAU,aACb,gCACE,wBAAIA,UAAU,WAAd,kBAGF,yBAAKA,UAAU,uBACb,2BACEP,GAAG,OACHU,KAAK,OACLH,UAAU,WACV0C,MAAOZ,EACPzB,SAAU,SAAA+B,GACR1B,QAAQC,IAAIyB,EAAMO,OAAOD,OACzBX,EAAaK,EAAMO,OAAOD,QAE5BE,WAAYT,IAEd,2BAAOjC,QAAQ,QAAf,mBACA,4BACEC,KAAK,SACLH,UAAU,+BACVO,QAAS4B,GAHX,WAQF,kBAAC3B,EAAD,CAAUI,MAAOK,OCtGP4B,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAD,MAAS6B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.02d2b20c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Context = React.createContext()\r\n","import React, { useContext } from 'react'\r\nimport { Context } from '../context'\r\n\r\nexport default function TodoItem({ id, title, completed }) {\r\n  // const [checked, setChecked] = useState(props.completed)\r\n  const { /*toggleTodo, removeTodo*/ dispatch } = useContext(Context)\r\n  const cls = ['todo-item animate__zoomIn']\r\n\r\n  if (completed) {\r\n    cls.push('completed')\r\n  }\r\n\r\n  return (\r\n    <li className={cls.join(' ')}>\r\n      <div className='todo-title'>\r\n        <label htmlFor={id}>\r\n          <input\r\n            id={id}\r\n            type='checkbox'\r\n            defaultChecked={completed}\r\n            onChange={() => {\r\n              dispatch({ type: 'toggle', payload: id })\r\n            }}\r\n          />\r\n          <span className='todo-text'>{title}</span>\r\n        </label>\r\n      </div>\r\n      <div className='button'>\r\n        <i\r\n          className='fas fa-trash'\r\n          onClick={() => {\r\n            dispatch({\r\n              type: 'remove',\r\n              payload: id,\r\n            })\r\n          }}\r\n        />\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport default function TodoList(props) {\r\n  console.log(props)\r\n  return (\r\n    <ul className='todo-list row' id='todo-list'>\r\n      {!props.todos.length\r\n        ? 'No todos'\r\n        : props.todos.map(e => (\r\n            <TodoItem\r\n              key={e.id}\r\n              id={e.id}\r\n              title={e.title}\r\n              completed={e.completed}\r\n            />\r\n          ))}\r\n    </ul>\r\n  )\r\n}\r\n","export default function (state, action) {\r\n  switch (action.type) {\r\n    case 'add':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: Date.now(),\r\n          title: action.payload,\r\n          completed: false,\r\n        },\r\n      ]\r\n\r\n    case 'toggle':\r\n      return state.map(e => {\r\n        if (e.id === action.payload) {\r\n          e.completed = !e.completed\r\n        }\r\n        return e\r\n      })\r\n\r\n    case 'remove':\r\n      return state.filter(e => e.id !== action.payload)\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React, { useState, useEffect, useReducer } from 'react'\nimport TodoList from './Components/TodoList'\nimport { Context } from './context'\nimport reducer from './readucer'\n\nexport default function App() {\n  const [state, dispatch] = useReducer(\n    reducer,\n    JSON.parse(localStorage.getItem('todos')) || []\n  )\n  const [todoTitle, setTodoTitle] = useState('')\n  // const [todos, setTodos] = useState([])\n\n  const clickHandler = event => {\n    console.log(event.clientX)\n  }\n  //Get data from localStorage\n  /*  useEffect(() => {\n    //If localStorage is empty set data to []\n    if (!localStorage.length) {\n      localStorage.setItem('todos', JSON.stringify(todos))\n    }\n    //If localStorage is not empty get data\n    // const raw = localStorage.getItem('todos') || setTodos([])\n    // setTodos(JSON.parse(raw))\n  }, [todos])*/\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state))\n  }, [state])\n\n  //Set data to localStorage\n  /*  useEffect(() => {\n    document.addEventListener('click', clickHandler)\n    localStorage.setItem('todos', JSON.stringify(todos))\n    return () => {\n      document.removeEventListener('click', clickHandler)\n    }\n  }, [todos])*/\n\n  const addTodo = event => {\n    if ((event.key === 'Enter' || event.type === 'click') && todoTitle !== '') {\n      dispatch({\n        type: 'add',\n        payload: todoTitle,\n      })\n\n      // setTodos([\n      //   ...state,\n      //   {\n      //     id: Date.now(),\n      //     title: todoTitle,\n      //     completed: false,\n      //   },\n      // ])\n      setTodoTitle('')\n      window.M.toast({ html: 'Task created' })\n    }\n    console.log(state)\n  }\n\n  /*  const removeTodo = id => {\n    setTodos(\n      todos.filter(e => {\n        return e.id !== id\n      })\n    )\n  }*/\n\n  /*const toggleTodo = id => {\n    setTodos(\n      todos.map(e => {\n        if (e.id === id) {\n          e.completed = !e.completed\n        }\n        return e\n      })\n    )\n  }*/\n\n  return (\n    <Context.Provider\n      value={{\n        /*toggleTodo, removeTodo*/\n        dispatch,\n      }}\n    >\n      <div className='todo-app row'>\n        <div className='container'>\n          <header>\n            <h1 className='display'>Todo List App</h1>\n          </header>\n\n          <div className='input-field col s12'>\n            <input\n              id='todo'\n              type='text'\n              className='validate'\n              value={todoTitle}\n              onChange={event => {\n                console.log(event.target.value)\n                setTodoTitle(event.target.value)\n              }}\n              onKeyPress={addTodo}\n            />\n            <label htmlFor='todo'>Create new todo</label>\n            <button\n              type='submit'\n              className='waves-effect waves-light btn'\n              onClick={addTodo}\n            >\n              Create\n            </button>\n          </div>\n          <TodoList todos={state} />\n        </div>\n      </div>\n    </Context.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}